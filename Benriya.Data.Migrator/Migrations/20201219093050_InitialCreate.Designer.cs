// <auto-generated />
using System;
using Benriya.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Benriya.Data.Migrator.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201219093050_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name");

                    b.ToTable("cms_category");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Category_Tags", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tag_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("tag_id");

                    b.ToTable("cms_category_tags");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comment_Likes", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("comment_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("comment_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("cms_comment_likes");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comment_Users", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("alias_name")
                        .HasColumnType("text");

                    b.Property<Guid>("comment_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("firstname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("lastname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("alias_name");

                    b.HasIndex("comment_id");

                    b.HasIndex("email");

                    b.HasIndex("firstname");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("lastname");

                    b.ToTable("cms_comment_users");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comments", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("content_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("content_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("cms_comments");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Content_Likes", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("content_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("content_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("cms_content_likes");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Content_Tags", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("content_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tag_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("content_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("tag_id");

                    b.ToTable("cms_content_tags");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Contents", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("body")
                        .HasColumnType("text");

                    b.Property<int>("category_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("path")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name");

                    b.HasIndex("path")
                        .IsUnique();

                    b.ToTable("cms_contents");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("category_id")
                        .HasColumnType("integer");

                    b.Property<string>("code")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_type_color")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("quantity_origin")
                        .HasColumnType("integer");

                    b.Property<int>("unit_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("category_id")
                        .HasDatabaseName("IX_Goods_Goods_Category_id");

                    b.HasIndex("code")
                        .HasDatabaseName("IX_Goods_code");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_Goods_isActive");

                    b.HasIndex("is_type_color")
                        .HasDatabaseName("IX_Goods_isType_colorr");

                    b.HasIndex("name")
                        .HasDatabaseName("IX_Goods_name");

                    b.HasIndex("quantity")
                        .HasDatabaseName("IX_Goods_quantity");

                    b.HasIndex("unit_id")
                        .HasDatabaseName("IX_Goods_Goods_Unit_id");

                    b.ToTable("inventory_goods");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Category_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_Goods_Category_isActive");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Category_name");

                    b.ToTable("inventory_goods_category");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Color", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("color")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.Property<string>("quantity")
                        .HasColumnType("text");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Color_id");

                    b.HasIndex("name")
                        .HasDatabaseName("IX_Goods_Color_name");

                    b.HasIndex("product_id")
                        .HasDatabaseName("IX_Goods_Color_Goods_id");

                    b.HasIndex("quantity")
                        .HasDatabaseName("IX_Goods_Color_quantity");

                    b.ToTable("inventory_goods_color");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Image", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Colorid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Goodsid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("color_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("image_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("Colorid");

                    b.HasIndex("Goodsid");

                    b.HasIndex("color_id")
                        .HasDatabaseName("IX_Goods_Image_Color_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Image_id");

                    b.HasIndex("image_name")
                        .HasDatabaseName("IX_Goods_Image_img_name");

                    b.HasIndex("product_id")
                        .HasDatabaseName("IX_Goods_Image_Goods_id");

                    b.HasIndex("quantity")
                        .HasDatabaseName("IX_Image_quantity");

                    b.ToTable("inventory_goods_images");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Tags", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("tag_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Tags_id");

                    b.HasIndex("product_id")
                        .HasDatabaseName("IX_Goods_Tags_Goods_id");

                    b.HasIndex("tag_id")
                        .HasDatabaseName("IX_Goods_Tags__id");

                    b.ToTable("inventory_goods_tags");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Unit", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Unit_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_Goods_Unit_isActive");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_Goods_Unit_name");

                    b.ToTable("inventory_goods_unit");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_main")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("remark")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Inventory_Warehouse_id");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_Inventory_Warehouse_name");

                    b.ToTable("inventory_warehouse");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse_Area", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_IVW_Area_id");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_IVW_Area_name");

                    b.HasIndex("warehouse_id")
                        .HasDatabaseName("IX_IVW_Area_Warehouse_id");

                    b.ToTable("inventory_warehouse_area");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse_Store", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("area_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<Guid>("goods_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("warehouse_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("area_id")
                        .HasDatabaseName("IX_IVW_Store_Area_id");

                    b.HasIndex("goods_id")
                        .HasDatabaseName("IX_IVW_Store_Goods_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_IVW_Store_id");

                    b.HasIndex("warehouse_id")
                        .HasDatabaseName("IX_IVW_Store_Warehouse_id");

                    b.ToTable("inventory_warehouse_store");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Orders.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Pomotion_Masterid")
                        .HasColumnType("uuid");

                    b.Property<string>("code")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_completed")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_confirm")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_temp")
                        .HasColumnType("boolean");

                    b.Property<Guid>("session_id")
                        .HasColumnType("uuid");

                    b.Property<string>("status")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("total")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("Pomotion_Masterid");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Order_id");

                    b.ToTable("ecommerce_order");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Orders.Order_Detail", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("goods_id")
                        .HasColumnType("uuid");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<decimal>("original_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("promo_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("goods_id")
                        .HasDatabaseName("IX_Order_Detail_Goods_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_Order_Detail_id");

                    b.ToTable("ecommerce_order_detail");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Promotion.Pomotion_Master", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<Guid>("goods_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("original_price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("promo_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id", "goods_id")
                        .IsUnique()
                        .HasDatabaseName("IX_Pomotion_id");

                    b.ToTable("ecommerce_promotion");
                });

            modelBuilder.Entity("Benriya.Share.Models.CoreTags.Tags", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("group_id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name");

                    b.ToTable("tags_data");
                });

            modelBuilder.Entity("Benriya.Share.Models.CoreTags.Tags_Group", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name")
                        .IsUnique();

                    b.ToTable("tags_group");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Documents", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("check_sum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("file_type_id")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_public")
                        .HasColumnType("boolean");

                    b.Property<int>("model_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("model_uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("module")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("file_type_id")
                        .HasDatabaseName("IX_FileStore_Documents_Type_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Documents_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_FileStore_Docs_is_active");

                    b.HasIndex("model_id")
                        .HasDatabaseName("IX_FileStore_Documents_Docs_model_id");

                    b.HasIndex("model_uuid")
                        .HasDatabaseName("IX_FileStore_Documents_Docs_model_uuid");

                    b.HasIndex("module")
                        .HasDatabaseName("IX_FileStore_Documents_module");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Documents_name");

                    b.ToTable("filestore_documents");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Files", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("check_sum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("file_type_id")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_public")
                        .HasColumnType("boolean");

                    b.Property<int>("model_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("model_uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("module")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("file_type_id")
                        .HasDatabaseName("IX_FileStore_Files_Type_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Files_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_FileStore_Files_is_active");

                    b.HasIndex("model_id")
                        .HasDatabaseName("IX_FileStore_Documents_Files_model_id");

                    b.HasIndex("model_uuid")
                        .HasDatabaseName("IX_FileStore_Documents_Files_model_uuid");

                    b.HasIndex("module")
                        .HasDatabaseName("IX_FileStore_Files_module");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Files_name");

                    b.ToTable("filestore_files");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Images", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("check_sum")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("file_type_id")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_public")
                        .HasColumnType("boolean");

                    b.Property<int>("model_id")
                        .HasColumnType("integer");

                    b.Property<Guid>("model_uuid")
                        .HasColumnType("uuid");

                    b.Property<string>("module")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("title")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("file_type_id")
                        .HasDatabaseName("IX_FileStore_Images_Type_id");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Images_id");

                    b.HasIndex("is_active")
                        .HasDatabaseName("IX_FileStore_Images_is_active");

                    b.HasIndex("model_id")
                        .HasDatabaseName("IX_FileStore_Documents_Images_model_id");

                    b.HasIndex("module")
                        .HasDatabaseName("IX_FileStore_Images_module");

                    b.HasIndex("name")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Images_name");

                    b.HasIndex("model_uuid", "check_sum")
                        .HasDatabaseName("IX_FileStore_Documents_Images_model_uuid");

                    b.ToTable("filestore_images");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("file_extension")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("file_type")
                        .HasColumnType("integer");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("id");

                    b.HasIndex("file_extension")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Type_name_extension");

                    b.HasIndex("file_type")
                        .HasDatabaseName("IX_FileStore_Type_x");

                    b.HasIndex("id")
                        .IsUnique()
                        .HasDatabaseName("IX_FileStore_Type_id");

                    b.HasIndex("name")
                        .HasDatabaseName("IX_FileStore_Type_name");

                    b.ToTable("filestore_types");
                });

            modelBuilder.Entity("Benriya.Share.Models.Menus.QuickMenu", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<int>("system_menu_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("system_menu_id")
                        .HasDatabaseName("IX_QuickMenu_on_SystemMenu_id");

                    b.ToTable("menu_quick_access");
                });

            modelBuilder.Entity("Benriya.Share.Models.Menus.SystemMenu", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("icon")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_redirect")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("parent_menu_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("IX_Menu_Code");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("name")
                        .HasDatabaseName("IX_Menu_Name");

                    b.HasIndex("parent_menu_id")
                        .HasDatabaseName("IX_Menu_ParentMenu_id");

                    b.ToTable("menu_system");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Permission_Access", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("IX_Permission_Access_Code");

                    b.HasIndex("id")
                        .IsUnique();

                    b.ToTable("permission_access");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Policy_Roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("module_code")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("module_name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("permission_id")
                        .HasColumnType("integer");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("permission_id")
                        .HasDatabaseName("IX_Policy_Permission_id");

                    b.HasIndex("role_id")
                        .HasDatabaseName("IX_Policy_Roles_id");

                    b.ToTable("user_policy_roles");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Credential", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<byte[]>("password_hash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("password_salt")
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("user_credential");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Directauth", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("key")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("key")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("user_direct_auth");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Login", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("is_loggedIn")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("login_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("logout_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("logout_update")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("user_login_logs");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("role_level")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("code")
                        .IsUnique()
                        .HasDatabaseName("IX_Rolecode");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("role_level")
                        .HasDatabaseName("IX_RoleLevel");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Token", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("expiry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("token")
                        .HasColumnType("text");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("user_tokens");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Users", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("alias_name")
                        .HasColumnType("text");

                    b.Property<string>("avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("created_by")
                        .HasColumnType("uuid");

                    b.Property<string>("created_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("firstname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("lastname")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("updated_by")
                        .HasColumnType("uuid");

                    b.Property<string>("updated_ip")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("id")
                        .IsUnique();

                    b.HasIndex("role_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("OrderOrder_Detail", b =>
                {
                    b.Property<Guid>("Order_Detailsid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Ordersid")
                        .HasColumnType("uuid");

                    b.HasKey("Order_Detailsid", "Ordersid");

                    b.HasIndex("Ordersid");

                    b.ToTable("OrderOrder_Detail");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Category_Tags", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Category", "Category")
                        .WithMany("Category_Tags")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Benriya.Share.Models.CoreTags.Tags", "Tags")
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comment_Likes", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Comments", "Comment")
                        .WithMany("Comment_Likes")
                        .HasForeignKey("comment_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comment_Users", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Comments", "Comments")
                        .WithMany("Comment_Users")
                        .HasForeignKey("comment_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comments", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Contents", "Contents")
                        .WithMany("Comments")
                        .HasForeignKey("content_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Content_Likes", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Contents", "Content")
                        .WithMany("Content_Likes")
                        .HasForeignKey("content_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Content_Tags", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Contents", "Content")
                        .WithMany("Content_Tags")
                        .HasForeignKey("content_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Benriya.Share.Models.CoreTags.Tags", "Tags")
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Contents", b =>
                {
                    b.HasOne("Benriya.Modules.CMS.Share.Models.Category", "Category")
                        .WithMany("Contents")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods_Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods_Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("unit_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Color", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods", "Product")
                        .WithMany("Colors")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Image", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods_Color", "Color")
                        .WithMany("Images")
                        .HasForeignKey("Colorid");

                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods", "Goods")
                        .WithMany("Images")
                        .HasForeignKey("Goodsid");

                    b.Navigation("Color");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Tags", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benriya.Share.Models.CoreTags.Tags", "Tags")
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse_Area", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse", "Warehouse")
                        .WithMany("Areas")
                        .HasForeignKey("warehouse_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse_Store", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse_Area", "Area")
                        .WithMany()
                        .HasForeignKey("area_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods", "Goods")
                        .WithMany("Warehouse_Store")
                        .HasForeignKey("goods_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse", "Warehouse")
                        .WithMany("Stores")
                        .HasForeignKey("warehouse_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Goods");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Orders.Order", b =>
                {
                    b.HasOne("Benriya.Modules.eCommerce.Share.Models.Promotion.Pomotion_Master", null)
                        .WithMany("Orders")
                        .HasForeignKey("Pomotion_Masterid");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Orders.Order_Detail", b =>
                {
                    b.HasOne("Benriya.Modules.Inventory.Share.Models.Products.Goods", "Goods")
                        .WithMany()
                        .HasForeignKey("goods_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("Benriya.Share.Models.CoreTags.Tags", b =>
                {
                    b.HasOne("Benriya.Share.Models.CoreTags.Tags_Group", "Group")
                        .WithMany("Tags")
                        .HasForeignKey("group_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Documents", b =>
                {
                    b.HasOne("Benriya.Share.Models.FileStore.FileStore_Type", "FileType")
                        .WithMany("Documents")
                        .HasForeignKey("file_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Files", b =>
                {
                    b.HasOne("Benriya.Share.Models.FileStore.FileStore_Type", "FileType")
                        .WithMany("Files")
                        .HasForeignKey("file_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Images", b =>
                {
                    b.HasOne("Benriya.Share.Models.FileStore.FileStore_Type", "FileType")
                        .WithMany("Images")
                        .HasForeignKey("file_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Benriya.Share.Models.Menus.QuickMenu", b =>
                {
                    b.HasOne("Benriya.Share.Models.Menus.SystemMenu", "SystemMenu")
                        .WithMany()
                        .HasForeignKey("system_menu_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemMenu");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Policy_Roles", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.Permission_Access", "Permission")
                        .WithMany("Policy_Roles")
                        .HasForeignKey("permission_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Benriya.Share.Models.SystemUsers.User_Role", "User_Role")
                        .WithMany("Policy_Roles")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User_Role");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Credential", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.Users", "User")
                        .WithOne("User_Credential")
                        .HasForeignKey("Benriya.Share.Models.SystemUsers.User_Credential", "user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Directauth", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.Users", "User")
                        .WithMany("Direct_Auth")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Login", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.Users", "User")
                        .WithOne("User_Login")
                        .HasForeignKey("Benriya.Share.Models.SystemUsers.User_Login", "user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Token", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.Users", "User")
                        .WithOne("User_Token")
                        .HasForeignKey("Benriya.Share.Models.SystemUsers.User_Token", "user_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Users", b =>
                {
                    b.HasOne("Benriya.Share.Models.SystemUsers.User_Role", "User_Role")
                        .WithMany("User")
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User_Role");
                });

            modelBuilder.Entity("OrderOrder_Detail", b =>
                {
                    b.HasOne("Benriya.Modules.eCommerce.Share.Models.Orders.Order_Detail", null)
                        .WithMany()
                        .HasForeignKey("Order_Detailsid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Benriya.Modules.eCommerce.Share.Models.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("Ordersid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Category", b =>
                {
                    b.Navigation("Category_Tags");

                    b.Navigation("Contents");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Comments", b =>
                {
                    b.Navigation("Comment_Likes");

                    b.Navigation("Comment_Users");
                });

            modelBuilder.Entity("Benriya.Modules.CMS.Share.Models.Contents", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Content_Likes");

                    b.Navigation("Content_Tags");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods", b =>
                {
                    b.Navigation("Colors");

                    b.Navigation("Images");

                    b.Navigation("Tags");

                    b.Navigation("Warehouse_Store");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Products.Goods_Color", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Benriya.Modules.Inventory.Share.Models.Warehouses.Warehouse", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("Benriya.Modules.eCommerce.Share.Models.Promotion.Pomotion_Master", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Benriya.Share.Models.CoreTags.Tags_Group", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Benriya.Share.Models.FileStore.FileStore_Type", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Files");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Permission_Access", b =>
                {
                    b.Navigation("Policy_Roles");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.User_Role", b =>
                {
                    b.Navigation("Policy_Roles");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Benriya.Share.Models.SystemUsers.Users", b =>
                {
                    b.Navigation("Direct_Auth");

                    b.Navigation("User_Credential");

                    b.Navigation("User_Login");

                    b.Navigation("User_Token");
                });
#pragma warning restore 612, 618
        }
    }
}
